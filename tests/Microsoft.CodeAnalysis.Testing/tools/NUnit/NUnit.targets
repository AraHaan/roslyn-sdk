<?xml version="1.0" encoding="utf-8"?>
<!-- Licensed to the .NET Foundation under one or more agreements. The .NET Foundation licenses this file to you under the MIT license. See the LICENSE file in the project root for more information. -->
<Project>
  <ItemGroup>
    <PackageReference Include="Microsoft.TestPlatform" Version="$(MicrosoftTestPlatformVersion)" GeneratePathProperty="true" IsImplicitlyDefined="true" PrivateAssets="all" Publish="true"/>
    <PackageReference Include="NUnit" Version="$(NUnitVersion)" IsImplicitlyDefined="true" PrivateAssets="all" Publish="true"/>
    <PackageReference Include="NUnit3TestAdapter" Version="$(NUnit3TestAdapterVersion)" IsImplicitlyDefined="true" PrivateAssets="all" Publish="true"/>
  </ItemGroup>

  <!-- 
    Include '*' target to force running tests even if the input assemblies haven't changed and the outputs are present.
    This matches the common expectations that test command always runs all tests in scope.
  -->
  <Target Name="RunTests"
          Inputs="@(TestToRun);*"
          Outputs="%(TestToRun.ResultsStdOutPath);%(TestToRun.ResultsXmlPath)">
    <Telemetry EventName="NETCORE_ENGINEERING_TELEMETRY" EventData="Category=Test" />
    <PropertyGroup>
      <_TestEnvironment>%(TestToRun.EnvironmentDisplay)</_TestEnvironment>
      <_TestAssembly>%(TestToRun.Identity)</_TestAssembly>
      <_TestRuntime>%(TestToRun.TestRuntime)</_TestRuntime>
      <_TestTimeout>%(TestToRun.TestTimeout)</_TestTimeout>
      <_TestRunnerAdditionalArguments>%(TestToRun.TestRunnerAdditionalArguments)</_TestRunnerAdditionalArguments>

      <_TestRunnerTargetFramework>net451</_TestRunnerTargetFramework>
    </PropertyGroup>

    <PropertyGroup>
      <_VSTestConsoleExe>vstest.console.exe</_VSTestConsoleExe>
      <_VSTestConsoleExePath>$(NuGetPackageRoot)microsoft.testplatform/$(MicrosoftTestPlatformVersion)/tools/$(_TestRunnerTargetFramework)/Common7/IDE/Extensions/TestPlatform/$(_VSTestConsoleExe)</_VSTestConsoleExePath>

      <!-- TODO: is _TestRunnerArgs correct? -->
      <_TestRunnerArgs>"$(_TestAssembly)" /Platform:%(TestToRun.Architecture) /Framework:%(TestToRun.TargetFramework) /Logger:trx;LogFileName="%(TestToRun.ResultsXmlPath)" $(_TestRunnerAdditionalArguments)</_TestRunnerArgs>
      <_TestRunnerArgs Condition="'$(_TestRuntime)' == 'Mono'">$(TestRuntimeAdditionalArguments) "$(_VSTestConsoleExePath)" $(_TestRunnerArgs)</_TestRunnerArgs>

      <!-- TODO: is _TestRunner correct? -->
      <_TestRunner Condition="'$(_TestRuntime)' == 'Mono'">$(MonoTool)</_TestRunner>
      <_TestRunner Condition="'$(_TestRuntime)' != 'Mono'">$(_VSTestConsoleExePath)</_TestRunner>
    </PropertyGroup>

    <PropertyGroup>
      <_TestRunnerCommand>"$(_TestRunner)" $(_TestRunnerArgs)</_TestRunnerCommand>

      <!-- 
        Redirect std output of the runner.
        TODO: is NUnit the same as xUnit with respect to outputs?
        Note that xUnit outputs failure info to both STDOUT (stack trace, message) and STDERR (failed test name) 
      -->
      <_TestRunnerCommand Condition="'$(TestCaptureOutput)' != 'false'">$(_TestRunnerCommand) > "%(TestToRun.ResultsStdOutPath)" 2>&amp;1</_TestRunnerCommand>
    </PropertyGroup>

    <ItemGroup>
      <_OutputFiles Include="%(TestToRun.ResultsXmlPath)" />
      <_OutputFiles Include="%(TestToRun.ResultsStdOutPath)" />
    </ItemGroup>

    <MakeDir Directories="@(_OutputFiles->'%(RootDir)%(Directory)')"/>
    <Delete Files="@(_OutputFiles)" />

    <Message Text="Running tests: $(_TestAssembly) [$(_TestEnvironment)]" Importance="high"/>
    <Exec Command='$(_TestRunnerCommand)'
          LogStandardErrorAsError="false"
          WorkingDirectory="$(_TargetDir)"
          IgnoreExitCode="true"
          Timeout="$(_TestTimeout)"
          ContinueOnError="WarnAndContinue">
      <Output TaskParameter="ExitCode" PropertyName="_TestErrorCode" />
    </Exec>

    <!--
      Add command line to the log.
    -->
    <WriteLinesToFile File="%(TestToRun.ResultsStdOutPath)"
                      Overwrite="false"
                      Lines=";=== COMMAND LINE ===;$(_TestRunnerCommand)"
                      Condition="'$(TestCaptureOutput)' != 'false'" />

    <!--
      Report test status.
    -->
    <Message Text="Tests succeeded: $(_TestAssembly) [$(_TestEnvironment)]" Condition="'$(_TestErrorCode)' == '0'" Importance="high" />

    <PropertyGroup>
      <_ResultsFileToDisplay>%(TestToRun.ResultsHtmlPath)</_ResultsFileToDisplay>
      <_ResultsFileToDisplay Condition="!Exists('$(_ResultsFileToDisplay)')">%(TestToRun.ResultsStdOutPath)</_ResultsFileToDisplay>
    </PropertyGroup>

    <!-- 
      Ideally we would set ContinueOnError="ErrorAndContinue" so that when a test fails in multi-targeted test project
      we'll still run tests for all target frameworks. ErrorAndContinue doesn't work well on Linux though: https://github.com/Microsoft/msbuild/issues/3961.
    -->
    <Error Text="Tests failed: $(_ResultsFileToDisplay) [$(_TestEnvironment)]" Condition="'$(_TestErrorCode)' != '0'" File="NUnit" />

    <ItemGroup>
      <FileWrites Include="@(_OutputFiles)"/>
    </ItemGroup>
  </Target>
</Project>
